<h2><%= room.roomName %></h2>



<div id="chatContainer">
<img src="images/B40-logo-small.png">
<div id="messagesContainer" >
</div>
</div>
<div id="newMessageForm">
    <input id="input" placeholder="Type prayer or response here..."></textarea>
    <br>
    <button id="postMessageButton">Send</button>
</div>

<div class="bottomBuffer" />

<script>
    var MessageModel = Backbone.Model.extend({
        urlRoot: '/message',
    });

    // var SailsCollection = Backbone.Collection.extend({
    //   sailsCollection: "",
    //   socket: null,
    //   sync: function(method, model, options) {
    //     var where = {};
    //     if (options.where) {
    //       where = {
    //         where : options.where
    //       }
    //     }
    //     if (typeof this.sailsCollection === "string" && this.salesCollection !== "") {
    //       this.socket = io.connect();
    //       this.socket.on("connect", _.bind(function() {
    //         this.socket.request("/" + this.sailsCollection, where, _.bind(function(users){
    //           this.set(users);
    //         }, this));
    //
    //         this.socket.on("message", _.bind(function(msg) {
    //           var m = msg.verb;
    //           if (m === "create" ) {
    //             this.add(msg.data);
    //           } else if ( m === "update" ) {
    //             this.get(msg.id).set(msg.data);
    //           } else if (m === "destroy") {
    //             this.remove(this.get(msg.id));
    //           }
    //         }, this));
    //       }, this));
    //     } else {
    //       console.log("Error: Cannot retrieve models because property 'sailsCollection' not set on the collection");
    //     }
    //   }
    // });
    //
    // var MessageCollection = SailsCollection.extend({
    //     sailsCollection: 'messages',
    //     model: MessageModel,
    // });

    var start = new Date('<%= room.start %>');

    
    var daysBetween = function( date1, date2 ) {
      //Get 1 day in milliseconds
      var one_day=1000*60*60*24;

      // Convert both dates to milliseconds
      var date1_ms = date1.getTime();
      var date2_ms = date2.getTime();

      // Calculate the difference in milliseconds
      var difference_ms = date2_ms - date1_ms;
    
      // Convert back to days and return
      return Math.round(difference_ms/one_day);
    }


    var MessageCollection = Backbone.Collection.extend({
        url: '/message',
        model: MessageModel
      // ,
//       byDay: function (day) {
//         filtered = this.filtered(function (msg) {
//           var created = this.get("createdAt");
//           var diff = daysBetween(start, new Date(created));
//           return diff === day;
        // });
      // }
    });
    
    var messages = new MessageCollection();
    messages.fetch();
    
    $("#input").on('keydown', function(e){
      if(e.which == 13 || e.which == 9) {
        $("#postMessageButton").trigger('click');
        return false;
      }
    });

    $("#postMessageButton").click(function(){
        var messageText = $("#input").val();
        messages.create({message: messageText}, {wait: true});
        $("#input").val("");
    });
    
    _.templateSettings = {
        interpolate : /\{\{(.+?)\}\}/g
    };
    var MessagesView = Backbone.View.extend({
        el: '#messagesContainer',
        initialize: function () {
            this.collection.on('add', this.render, this);
            this.render();
        },
        template: _.template("<div><p class='message' id='message{{day}}'>{{ content }}</p></div>"),
        template_day: _.template("<div class='dayLabel'> {{ day }}</div>"),
        render: function () {
              this.$el.html("");
              var lastMessage;
              this.collection.each(function(msg){
                lastMessage = this.template(msg.toJSON());
                  this.$el.append(lastMessage);                 
              }, this);

              for (var i = 0; i < 40; i++) {
                var firstMessageInDay = this.$el.find('#message' + i);
                if (firstMessageInDay !== null && firstMessageInDay.length > 0) {
                  firstMessageInDay.before(this.template_day({ day : i+1 }));
                } else {
                  this.$el.append(this.template_day({ day : i+1 }));
                }
              }
              // window.scrollTo(0, lastMessage.offset().top);
              $('body, html').animate({ scrollTop: lastMessage.offset().top }, 1000);
        }
    });
    
    
    
    // var msg = messages.pop();
    // var created = msg.get('createdAt');
    // var date = new Date(created);
    // var diff = daysBetween(start, created);

    // messages.each(function(msg) {
    //   var created = msg.get('createdAt');
    //   var day = daysBetween(start, new Date(created));
    //   msg.day = day;
    //
    //   console.log(msg.day);
    // });
    // for (var i = 0; i < 40; i++) {
    //
    // }
    
    var mView = new MessagesView({collection: messages});
</script>